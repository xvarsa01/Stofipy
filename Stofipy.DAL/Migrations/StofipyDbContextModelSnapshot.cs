// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stofipy.DAL;

#nullable disable

namespace Stofipy.DAL.Migrations
{
    [DbContext(typeof(StofipyDbContext))]
    partial class StofipyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Stofipy.DAL.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DefaultAlbumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lyrics")
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Size")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DefaultAlbumId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInAlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("FileId");

                    b.ToTable("FilesInAlbums");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInPlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndexActual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndexCustom")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("FilesInPlaylists");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInQueueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PriorityQueue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FilesInQueue");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileFollowingAuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FollowerId");

                    b.ToTable("ProfileFollowingAuthorEntity");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileFollowingProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("ProfileFollowingProfileEntity");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.AuthorEntity", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FileEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.AuthorEntity", "Author")
                        .WithMany("Files")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stofipy.DAL.Entities.AlbumEntity", "DefaultAlbum")
                        .WithMany()
                        .HasForeignKey("DefaultAlbumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("DefaultAlbum");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInAlbumEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.AlbumEntity", "Album")
                        .WithMany("FilesInAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stofipy.DAL.Entities.FileEntity", "File")
                        .WithMany("FilesInAlbums")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInPlaylistEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.FileEntity", "File")
                        .WithMany("FilesInPlaylists")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stofipy.DAL.Entities.PlaylistEntity", "Playlist")
                        .WithMany("FilesInPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FilesInQueueEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.FileEntity", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.ProfileEntity", "CreatedBy")
                        .WithMany("CreatedPlaylists")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileFollowingAuthorEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.AuthorEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stofipy.DAL.Entities.ProfileEntity", "Follower")
                        .WithMany("FollowingAuthors")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileFollowingProfileEntity", b =>
                {
                    b.HasOne("Stofipy.DAL.Entities.ProfileEntity", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stofipy.DAL.Entities.ProfileEntity", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.AlbumEntity", b =>
                {
                    b.Navigation("FilesInAlbums");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.FileEntity", b =>
                {
                    b.Navigation("FilesInAlbums");

                    b.Navigation("FilesInPlaylists");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.PlaylistEntity", b =>
                {
                    b.Navigation("FilesInPlaylists");
                });

            modelBuilder.Entity("Stofipy.DAL.Entities.ProfileEntity", b =>
                {
                    b.Navigation("CreatedPlaylists");

                    b.Navigation("Followers");

                    b.Navigation("FollowingAuthors");

                    b.Navigation("Followings");
                });
#pragma warning restore 612, 618
        }
    }
}
